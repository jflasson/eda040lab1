package todo;
import done.*;
import se.lth.cs.realtime.semaphore.Semaphore;
import se.lth.cs.realtime.semaphore.MutexSem;

public class AlarmClock extends Thread {

	private static ClockInput	input;
	private static ClockOutput	output;
	private static Semaphore	sem; 

	public AlarmClock(ClockInput i, ClockOutput o) {
		input = i;
		output = o;
		sem = input.getSemaphoreInstance();
	}

	// The AlarmClock thread is started by the simulator. No
	// need to start it by yourself, if you do you will get
	// an IllegalThreadStateException. The implementation
	// below is a simple alarmclock thread that beeps upon 
	// each keypress. To be modified in the lab.
	public void run() {
		while (true) {
			sem.take();
			//output.doAlarm();
			long t = System.currentTimeMillis();
			long timeofday = t%86400000;
			long hour = timeofday/3600000 + 2;
			timeofday = timeofday%3600000;
			long minute = timeofday/60000;
			timeofday = timeofday%60000;
			long seconds = timeofday/1000;
			
			
			System.out.println(hour);
			System.out.println(minute);
			System.out.println(seconds);
			System.out.println(timeofday);
			
		}
	}
}
